import isNil from 'lodash-es/isNil';
import axios from 'axios';
import { Realtime } from 'ably';
import get from 'lodash-es/get';
import mitt from 'mitt';
import { __decorate } from 'tslib';
import DOMPurify from 'dompurify';
import dayjs from 'dayjs';
import humps from 'humps';
import filter from 'lodash-es/filter';
import find from 'lodash-es/find';
import map from 'lodash-es/map';
import eq from 'lodash-es/eq';
import has from 'lodash-es/has';
import keys from 'lodash-es/keys';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var api = /*#__PURE__*/axios.create({
  baseURL: 'https://api.magicbell.com'
});
/**
 * Performs an ajax request using `fetch`.
 *
 * @param method - the request method to be used when making the request
 * @param url - the server URL that will be used for the request
 * @param data - the data to be sent as the request body
 * @param customParams - the URL parameters to be sent with the request
 */

function sendAPIRequest(method, url, data, params) {
  var headers = {
    Accept: 'application/json',
    'Content-Type': 'application/json'
  };
  return api({
    method: method,
    url: url,
    data: data,
    params: params,
    headers: headers,
    baseURL: api.defaults.baseURL
  }).then(function (response) {
    return response.data;
  }, function (error) {
    throw error;
  });
}
/**
 * Performs a GET request.
 *
 * @param url - the server URL that will be used for the request
 * @param params - the URL parameters to be sent with the request
 */


function fetchAPI(url, params) {
  if (params === void 0) {
    params = {};
  }

  return sendAPIRequest('get', url, null, params);
}
/**
 * Performs a POST request.
 *
 * @param url - the server URL that will be used for the request
 * @param data - the data to be sent as the request body
 * @param params - the URL parameters to be sent with the request
 */

function postAPI(url, data, params) {
  if (data === void 0) {
    data = {};
  }

  if (params === void 0) {
    params = {};
  }

  return sendAPIRequest('post', url, data, params);
}
/**
 * Performs a DELETE request.
 *
 * @param url - the server URL that will be used for the request
 * @param params - the URL parameters to be sent with the request
 */

function deleteAPI(url, params) {
  if (params === void 0) {
    params = {};
  }

  return sendAPIRequest('delete', url, null, params);
}
/**
 * Performs a PUT request.
 *
 * @param url - the server URL that will be used for the request
 * @param data - the data to be sent as the request body
 * @param params - the URL parameters to be sent with the request
 */

function putAPI(url, data, params) {
  if (params === void 0) {
    params = {};
  }

  return sendAPIRequest('put', url, data, params);
}
/**
 * Sets the default headers for all requests.
 *
 * @param apiKey API key of your MagicBell project
 * @param userEmail Email of the user whose notifications will be displayed
 * @param userExternalId External ID of the user you want to fetch notifications for
 * @param userKey Computed HMAC of the user whose notifications will be displayed, compute this with the secret of the magicbell project
 * @param apiSecret API secret of your MagicBell project (required to create notifications)
 */

function setupAjax(options) {
  var apiKey = options.apiKey,
      userEmail = options.userEmail,
      userExternalId = options.userExternalId,
      userKey = options.userKey,
      apiSecret = options.apiSecret,
      baseURL = options.baseURL;
  if (baseURL) api.defaults.baseURL = baseURL;
  api.defaults.headers['X-MAGICBELL-API-KEY'] = apiKey;
  api.defaults.headers['X-MAGICBELL-CLIENT-ID'] = Math.random().toString(36).substring(2) + Date.now();
  if (userEmail) api.defaults.headers['X-MAGICBELL-USER-EMAIL'] = userEmail;
  if (userExternalId) api.defaults.headers['X-MAGICBELL-USER-EXTERNAL-ID'] = userExternalId;
  if (userKey) api.defaults.headers['X-MAGICBELL-USER-HMAC'] = userKey;
  if (apiSecret) api.defaults.headers['X-MAGICBELL-API-SECRET'] = apiSecret;
}

/**
 * Function to build a Date given a number of seconds.
 *
 * @example secondsToDate(1582263571)
 */

function secondsToDate(seconds) {
  return seconds ? toDate(seconds * 1000) : null;
}
/**
 * Function to build a Date given a string or number of milliseconds.
 *
 * @example toDate('2020-02-01')
 */

function toDate(date) {
  return dayjs(date);
}
/**
 * Function to return a UNIX timestamp from a date representation. This value is
 * floored to the nearest second.
 *
 * @example toUnix('2020-10-06')
 */

function toUnix(date) {
  return dayjs(date).unix();
}

/**
 * Decorator factory  to camelize the keys of the arguments passed to the
 * function decorated with this.
 *
 * @example
 * @camelize()
 * set(json = {}) { Object.assign(this, json) }
 */

function camelize() {
  return function (target, propertyKey, descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var camelizedArgs = humps.camelizeKeys(args);
      return originalMethod.apply(this, camelizedArgs);
    };
  };
}

/**
 * Decorator factory to unwrap the arguments of the method decorated with this.
 *
 * @example
 * @unwrap('notification')
 * set(json = {}) { Object.assign(this, json) }
 */

function unwrap(wrapKey) {
  return function (target, propertyKey, descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var json = args[0],
          otherArgs = args.slice(1);
      var unwrappedJson = get(json, wrapKey, json);
      return originalMethod.apply(this, [unwrappedJson].concat(otherArgs));
    };
  };
}

/**
 * Decorator factory to wrap the first argument of the method decorated with
 * this.
 *
 * @example
 * @wrap('notification')
 * set(json) { Object.assign(this, json) }
 */

function wrap(wrapKey) {
  return function (target, propertyKey, descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      var _wrappedJson;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var json = args[0],
          otherArgs = args.slice(1);
      var unwrappedJson = get(json, wrapKey, json);
      var wrappedJson = (_wrappedJson = {}, _wrappedJson[wrapKey] = unwrappedJson, _wrappedJson);
      return originalMethod.apply(this, [wrappedJson].concat(otherArgs));
    };
  };
}

/**
 * A factory to create notifications. It implements identity map so there is
 * one and only one representation of a notification in the system.
 *
 * @example
 * const notification = NotificationFactory.create({ id });
 * notification.fetch();
 */

var NotificationFactory = /*#__PURE__*/function () {
  function NotificationFactory() {}

  NotificationFactory.create = function create(data) {
    if (data instanceof Notification) return data;
    var instance = this.identityMap.get(data.id);

    if (!instance) {
      instance = new Notification(data);
      this.cacheInstance(instance);
    }

    return instance;
  };

  NotificationFactory.cacheInstance = function cacheInstance(instance) {
    this.identityMap.set(instance.id, instance);
  };

  return NotificationFactory;
}();

NotificationFactory.identityMap = /*#__PURE__*/new Map();

/**
 * Class to represent a client that interacts with the MagicBell API.
 *
 * @example
 * class NotificationRepo extends RemoteRepository<Notification> {}
 */

var RemoteRepository = /*#__PURE__*/function () {
  function RemoteRepository(remotePathOrUrl) {
    this.remotePathOrUrl = void 0;
    this.remotePathOrUrl = remotePathOrUrl;
  }
  /**
   * Get an element from the API server by ID.
   *
   * @example
   * const notification = await repo.get('3df592eb-5f09dd6b');
   */


  var _proto = RemoteRepository.prototype;

  _proto.get = function get(id) {
    var url = this.remotePathOrUrl + "/" + id;
    return fetchAPI(url);
  }
  /**
   * Get elements that match params from the API server.
   *
   * @example
   * const notifications = await repo.findBy({ unread: true });
   */
  ;

  _proto.findBy = function findBy(queryParams) {
    return fetchAPI(this.remotePathOrUrl, queryParams);
  };

  _proto.create = function create(item) {
    return postAPI(this.remotePathOrUrl, item);
  };

  _proto.update = function update(id, item) {
    var url = this.remotePathOrUrl + "/" + id;
    return putAPI(url, item);
  }
  /**
   * Delete an element by ID from the API server.
   *
   * @example
   * const deleted = await repo.delete('3df592eb-5f09dd6b');
   */
  ;

  _proto["delete"] = function _delete(id) {
    var url = this.remotePathOrUrl + "/" + id;
    return deleteAPI(url).then(function () {
      return true;
    })["catch"](function () {
      return false;
    });
  };

  return RemoteRepository;
}();

/**
 * Class to interact with the notification API endpoints.
 *
 * @example
 * const repo = new NotificationRepository();
 * const notifications = repo.findBy({ unseen: true });
 */

var NotificationRepository = /*#__PURE__*/function (_RemoteRepository) {
  _inheritsLoose(NotificationRepository, _RemoteRepository);

  function NotificationRepository(remotePathOrUrl) {
    if (remotePathOrUrl === void 0) {
      remotePathOrUrl = '/notifications';
    }

    return _RemoteRepository.call(this, remotePathOrUrl) || this;
  }
  /**
   * Mark a notification as read in the API server.
   */


  var _proto = NotificationRepository.prototype;

  _proto.markAsRead = function markAsRead(id) {
    var url = this.remotePathOrUrl + "/" + id + "/read";
    return postAPI(url).then(function () {
      return true;
    })["catch"](function () {
      return false;
    });
  }
  /**
   * Mark a notification as unread in the API server.
   */
  ;

  _proto.markAsUnread = function markAsUnread(id) {
    var url = this.remotePathOrUrl + "/" + id + "/unread";
    return postAPI(url).then(function () {
      return true;
    })["catch"](function () {
      return false;
    });
  }
  /**
   * Mark all notifications as seen.
   */
  ;

  _proto.markAllAsSeen = function markAllAsSeen() {
    var url = this.remotePathOrUrl + "/seen";
    return postAPI(url);
  }
  /**
   * Mark all notifications as read.
   */
  ;

  _proto.markAllAsRead = function markAllAsRead() {
    var url = this.remotePathOrUrl + "/read";
    return postAPI(url);
  };

  return NotificationRepository;
}(RemoteRepository);

var _excluded = ["customAttributes"];
/**
 * A notification.
 *
 * @example
 * const notification = new Notification({ id })
 * notification.fetch()
 */

var Notification = /*#__PURE__*/function () {
  function Notification(attrs) {
    if (attrs === void 0) {
      attrs = {};
    }

    this.id = null;
    this.title = void 0;
    this.content = void 0;
    this.category = void 0;
    this.actionUrl = void 0;
    this.customAttributes = void 0;
    this.readAt = void 0;
    this.seenAt = void 0;
    this.sentAt = void 0;
    this.deletedAt = null;
    this.repo = void 0;
    this.set(attrs);
    this.repo = new NotificationRepository();
  }

  Notification.create = /*#__PURE__*/function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(notificationContent) {
      var repo, data, _error$response;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              repo = new NotificationRepository();
              _context.prev = 1;
              _context.next = 4;
              return repo.create(notificationContent);

            case 4:
              data = _context.sent;
              return _context.abrupt("return", NotificationFactory.create(data));

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](1);

              if (!(((_error$response = _context.t0.response) == null ? void 0 : _error$response.status) === 422)) {
                _context.next = 14;
                break;
              }

              throw _context.t0.response.data;

            case 14:
              throw _context.t0;

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 8]]);
    }));

    function create(_x) {
      return _create.apply(this, arguments);
    }

    return create;
  }();

  var _proto = Notification.prototype;

  /**
   * Fetch the notification from the API server.
   */
  _proto.fetch =
  /*#__PURE__*/
  function () {
    var _fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var json;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.id) {
                _context2.next = 8;
                break;
              }

              _context2.next = 3;
              return this.repo.get(this.id);

            case 3:
              json = _context2.sent;
              this.set(json);
              return _context2.abrupt("return", json);

            case 8:
              throw Error('The notification does not exist yet, save it first');

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function fetch() {
      return _fetch.apply(this, arguments);
    }

    return fetch;
  }()
  /**
   * Delete a notification from the API server.
   */
  ;

  _proto["delete"] =
  /*#__PURE__*/
  function () {
    var _delete2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!this.id) {
                _context3.next = 5;
                break;
              }

              this.deletedAt = Date.now();
              return _context3.abrupt("return", this.repo["delete"](this.id));

            case 5:
              throw Error('The notification does not exist yet, save it first');

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function _delete() {
      return _delete2.apply(this, arguments);
    }

    return _delete;
  }()
  /**
   * Mark a notification as read. Sets the `readAt` attribute to the current unix
   * timestamp. It also marks the notification as seen.
   */
  ;

  _proto.markAsRead = function markAsRead() {
    if (this.id) {
      this.isRead = true;
      this.isSeen = true;
      return this.repo.markAsRead(this.id);
    } else {
      var error = Error('The notification does not exist yet, save it first');
      return Promise.reject(error);
    }
  }
  /**
   * Mark a notification as unread. Sets the `readAt` attribute to null.
   */
  ;

  _proto.markAsUnread = function markAsUnread() {
    if (this.id) {
      this.isRead = false;
      return this.repo.markAsUnread(this.id);
    } else {
      var error = Error('The notification does not exist yet, save it first');
      return Promise.reject(error);
    }
  };

  _proto.set = function set(json) {
    if (json === void 0) {
      json = {};
    }

    var jsonWithCustomAttributes = this.transformCustomAttributes(json);
    Object.assign(this, jsonWithCustomAttributes);
  };

  _proto.transformCustomAttributes = function transformCustomAttributes(json) {
    var customAttributes = json.customAttributes,
        otherAttrs = _objectWithoutPropertiesLoose(json, _excluded);

    if (typeof customAttributes === 'string') {
      try {
        var parsedCustomAttributes = JSON.parse(customAttributes);
        return _extends({
          customAttributes: parsedCustomAttributes
        }, otherAttrs);
      } catch (e) {
        console.warn('"customAttributes" is not valid JSON');
      }
    }

    return json;
  };

  _createClass(Notification, [{
    key: "seenAtDate",
    get: function get() {
      return secondsToDate(this.seenAt);
    }
  }, {
    key: "sentAtDate",
    get: function get() {
      return secondsToDate(this.sentAt);
    }
  }, {
    key: "readAtDate",
    get: function get() {
      return secondsToDate(this.readAt);
    }
  }, {
    key: "isRead",
    get: function get() {
      return !!this.readAt;
    },
    set: function set(isRead) {
      this.readAt = isRead ? toUnix() : null;
    }
  }, {
    key: "isSeen",
    get: function get() {
      return !!this.seenAt;
    },
    set: function set(isSeen) {
      this.seenAt = isSeen ? toUnix() : null;
    }
  }, {
    key: "sanitizedContent",
    get: function get() {
      if (!isNil(this.content)) return DOMPurify.sanitize(this.content);
      return this.content;
    }
  }]);

  return Notification;
}();

__decorate([unwrap('notification'), camelize()], Notification.prototype, "set", null);

__decorate([wrap('notification')], Notification, "create", null);

var pushEventAggregator = /*#__PURE__*/mitt();
/**
 * Open an authenticated connection to ably.
 *
 * @param config The configuration used to open the connection.
 */

function connectToAbly(config, authServerUrl) {
  if (authServerUrl === void 0) {
    authServerUrl = 'https://api.magicbell.com';
  }

  var authUrl = authServerUrl + "/" + config.ws.authUrl;
  var authHeaders = {
    'X-MAGICBELL-API-KEY': config.apiKey
  };
  if (config.userEmail) authHeaders['X-MAGICBELL-USER-EMAIL'] = config.userEmail;
  if (config.userExternalId) authHeaders['X-MAGICBELL-USER-EXTERNAL-ID'] = config.userExternalId;
  if (config.userKey) authHeaders['X-MAGICBELL-USER-HMAC'] = config.userKey;
  var client = new Realtime({
    authUrl: authUrl,
    authHeaders: authHeaders,
    authMethod: 'POST',
    log: {
      level: 0
    },
    transports: ['web_socket']
  });
  return client;
}
/**
 * Publish an ably event to the push event emitter. If the push event contains
 * the ID of a notification, this is fetched before emitting the event.
 *
 * @param event Ably event
 */

function handleAblyEvent(event) {
  var name = event.name.replace(/\//gi, '.');
  var eventData = event.data;
  if (eventData.client_id && eventData.client_id === get(api, 'defaults.headers.X-MAGICBELL-CLIENT-ID')) return Promise.resolve();

  if (typeof eventData.id === 'string') {
    var notification = new Notification({
      id: eventData.id
    });
    return notification.fetch().then(function () {
      pushEventAggregator.emit(name, notification);
    });
  }

  pushEventAggregator.emit(name, eventData);
  return Promise.resolve();
}

/**
 * Class to interact with the config API endpoint.
 *
 * @example
 * const repo = new ConfigRepository();
 * const config = await repo.get();
 */

var ConfigRepository = /*#__PURE__*/function () {
  function ConfigRepository(remotePathOrUrl) {
    if (remotePathOrUrl === void 0) {
      remotePathOrUrl = '/config';
    }

    this.remotePathOrUrl = void 0;
    this.remotePathOrUrl = remotePathOrUrl;
  }
  /**
   * Get the configuration from the API server.
   */


  var _proto = ConfigRepository.prototype;

  _proto.get = function get() {
    return fetchAPI(this.remotePathOrUrl);
  };

  return ConfigRepository;
}();

/**
 * A configuration object.
 *
 * @example
 * const config = new Config({ apiKey, userEmail, userKey });
 * config.fetch();
 */

var Config = /*#__PURE__*/function () {
  function Config(args) {
    this.apiKey = void 0;
    this.userEmail = void 0;
    this.userExternalId = void 0;
    this.userKey = void 0;
    this.apiSecret = void 0;
    this.ws = void 0;
    this.inbox = void 0;
    this.channels = void 0;
    this.webPushNotifications = void 0;
    this.repo = void 0;
    this.xhrFetchState = 'idle';
    this.set(args);
    this.repo = new ConfigRepository();
  }
  /**
   * Fetch the configuration for the current user from the MagicBell server.
   */


  var _proto = Config.prototype;

  _proto.fetch =
  /*#__PURE__*/
  function () {
    var _fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var data;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.xhrFetchState = 'pending';
              _context.prev = 1;
              _context.next = 4;
              return this.repo.get();

            case 4:
              data = _context.sent;
              this.set(data);
              this.xhrFetchState = 'success';
              _context.next = 12;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](1);
              this.xhrFetchState = 'failure';

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[1, 9]]);
    }));

    function fetch() {
      return _fetch.apply(this, arguments);
    }

    return fetch;
  }();

  _proto.set = function set(json) {
    if (json === void 0) {
      json = {};
    }

    Object.assign(this, json);
  };

  return Config;
}();

__decorate([camelize()], Config.prototype, "set", null);

/**
 * A representation of collection of models.
 *
 * @example
 * const store = new Store();
 * store.at(0);
 */

var Store = /*#__PURE__*/function () {
  function Store() {
    var _this = this;

    this.items = [];

    this.map = function (fn) {
      return map(_this.items, fn);
    };

    this.filter = function (predicate) {
      return filter(_this.items, predicate);
    };

    this.find = function (predicate) {
      var models = find(_this.items, predicate);
      if (models) return models;
      return null;
    };
  }

  var _proto = Store.prototype;

  /**
   * Get a model from the `items` array, specified by index.
   */
  _proto.at = function at(index) {
    return this.length > index ? this.items[index] : null;
  }
  /**
   * Get a model from the `items` array by id.
   */
  ;

  _proto.get = function get(id) {
    var model = this.items.find(function (item) {
      return item.id === id;
    });
    if (model) return model;
    return null;
  }
  /**
   * Creates an array of values by running each model in `items` array thru
   * iteratee.
   *
   * The iteratee is invoked with three arguments: `(model, index, itemsArray)`.
   *
   * @param fn The function invoked per iteration.
   */
  ;

  /**
   * Append an item to the store.
   */
  _proto.push = function push(model) {
    if (!this.items.includes(model)) {
      this.items.push(model);
      return true;
    }

    return false;
  }
  /**
   * Remove a model from the store.
   *
   * If you want to delete a model from the server, use the `delete` method of
   * the model object instead.
   */
  ;

  _proto.remove = function remove(model) {
    var index = this.items.indexOf(model);

    if (index >= 0) {
      this.items.splice(index, 1);
      return true;
    }

    return false;
  }
  /**
   * Set the list of items.
   *
   * @param items
   */
  ;

  _proto.setItems = function setItems(items) {
    this.items = items;
  }
  /**
   * Reset the store.
   */
  ;

  _proto.reset = function reset() {
    this.items = [];
  };

  _createClass(Store, [{
    key: "length",
    get:
    /**
     * Number of models in the `items` array.
     *
     * If you want to get the total number of models in the server use `total`
     * instead.
     */
    function get() {
      return this.items.length;
    }
    /**
     * Returns true if the store has no models.
     */

  }, {
    key: "isEmpty",
    get: function get() {
      return this.length === 0;
    }
  }]);

  return Store;
}();

/**
 * A store that keep tracks of pagination as well.
 *
 * @example
 * const store = new PaginatedStore();
 * store.push(model);
 */

var PaginatedStore = /*#__PURE__*/function (_Store) {
  _inheritsLoose(PaginatedStore, _Store);

  function PaginatedStore() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Store.call.apply(_Store, [this].concat(args)) || this;
    _this.total = 0;
    _this.totalPages = void 0;
    _this.page = void 0;
    _this.perPage = void 0;
    _this.currentPage = 1;
    return _this;
  }

  var _proto = PaginatedStore.prototype;

  /**
   * Add a model at the end of the `items` array.
   */
  _proto.push = function push(model) {
    var added = _Store.prototype.push.call(this, model);

    if (added) this.total += 1;
    return added;
  }
  /**
   * Remove a model from the `items` array.
   *
   * If you want to delete a model from the server, use the `delete` method of
   * the model object instead.
   */
  ;

  _proto.remove = function remove(model) {
    var removed = _Store.prototype.remove.call(this, model);

    if (removed) this.total = Math.max(0, this.total - 1);
    return removed;
  };

  _createClass(PaginatedStore, [{
    key: "hasNextPage",
    get: function get() {
      return this.currentPage < this.totalPages;
    }
  }]);

  return PaginatedStore;
}(Store);

/**
 * A store that keep tracks of pagination as well.
 *
 * @example
 * const store = new RemoteStore();
 * store.push(model);
 */

var RemoteStore = /*#__PURE__*/function (_PaginatedStore) {
  _inheritsLoose(RemoteStore, _PaginatedStore);

  function RemoteStore() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PaginatedStore.call.apply(_PaginatedStore, [this].concat(args)) || this;
    _this.repo = void 0;
    _this.xhrFetchState = 'idle';
    return _this;
  }

  var _proto = RemoteStore.prototype;

  /**
   * Fetch items from the API server. The pagination data is also
   * updated. By default the array of items is not reset.
   *
   * @param queryParams Parameters to send to the API.
   * @param options.reset Reset the store.
   */
  _proto.fetch =
  /*#__PURE__*/
  function () {
    var _fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(queryParams, options) {
      var resetStore, json;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (options === void 0) {
                options = {
                  reset: false
                };
              }

              resetStore = options.reset || (queryParams == null ? void 0 : queryParams.page) === 1;
              if (resetStore) this.xhrFetchState = 'pending';
              _context.prev = 3;
              _context.next = 6;
              return this.repo.findBy(queryParams);

            case 6:
              json = _context.sent;
              if (resetStore) this.reset();
              this.set(json);
              this.xhrFetchState = 'success';
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](3);
              this.xhrFetchState = 'failure';

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[3, 12]]);
    }));

    function fetch(_x, _x2) {
      return _fetch.apply(this, arguments);
    }

    return fetch;
  }()
  /**
   * Fetch the next page of items.
   *
   * @param queryParams Parameters to send to the API.
   */
  ;

  _proto.fetchNextPage = function fetchNextPage(queryParams) {
    if (queryParams === void 0) {
      queryParams = {};
    }

    return this.fetch(_extends({}, queryParams, {
      page: this.currentPage + 1
    }));
  };

  return RemoteStore;
}(PaginatedStore);

var _excluded$1 = ["notifications"];
/**
 * A synced collection, or store, of notifications.
 *
 * @example
 * const store = new NotificationStore()
 */

var NotificationStore = /*#__PURE__*/function (_RemoteStore) {
  _inheritsLoose(NotificationStore, _RemoteStore);

  function NotificationStore(attrs) {
    var _this;

    if (attrs === void 0) {
      attrs = {};
    }

    _this = _RemoteStore.call(this) || this;
    _this.unseenCount = 0;
    _this.unreadCount = 0;
    _this.repo = void 0;

    _this.create = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data) {
        var notification;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return Notification.create(data);

              case 2:
                notification = _context.sent;

                _this.push(notification);

                return _context.abrupt("return", notification);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.markAllAsRead = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_temp) {
        var _ref3, _ref3$omitRequest, omitRequest, _iterator, _step, notification;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref3 = _temp === void 0 ? {} : _temp, _ref3$omitRequest = _ref3.omitRequest, omitRequest = _ref3$omitRequest === void 0 ? false : _ref3$omitRequest;
                _this.unreadCount = 0; // @TODO Remove the deep observer so the items array changes only after
                // the action is completed. In the meantime we clone the items array.

                for (_iterator = _createForOfIteratorHelperLoose(_this.items.slice()); !(_step = _iterator()).done;) {
                  notification = _step.value;
                  notification.isRead = true;
                }

                if (omitRequest) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", _this.repo.markAllAsRead());

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this.markAllAsSeen = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_temp2) {
        var _ref5, _ref5$omitRequest, omitRequest, _ref5$updateItems, updateItems, _iterator2, _step2, notification;

        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ref5 = _temp2 === void 0 ? {} : _temp2, _ref5$omitRequest = _ref5.omitRequest, omitRequest = _ref5$omitRequest === void 0 ? false : _ref5$omitRequest, _ref5$updateItems = _ref5.updateItems, updateItems = _ref5$updateItems === void 0 ? true : _ref5$updateItems;
                _this.unseenCount = 0;

                if (updateItems) {
                  // @TODO Remove the deep observer so the items array changes only after
                  // the action is completed. In the meantime we clone the items array.
                  for (_iterator2 = _createForOfIteratorHelperLoose(_this.items.slice()); !(_step2 = _iterator2()).done;) {
                    notification = _step2.value;
                    notification.isSeen = true;
                  }
                }

                if (!omitRequest) _this.repo.markAllAsSeen();

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }();

    _this.set(attrs);

    _this.repo = new NotificationRepository();
    return _this;
  }

  var _proto = NotificationStore.prototype;

  _proto.push = function push(notification) {
    var added = _RemoteStore.prototype.push.call(this, notification);

    if (added && !notification.isRead) this.incrementUnreadCount();
    if (added && !notification.isSeen) this.incrementUnseenCount();
    return added;
  };

  _proto.remove = function remove(notification) {
    var removed = _RemoteStore.prototype.remove.call(this, notification);

    if (removed && !notification.isRead) this.decrementUnreadCount();
    if (removed && !notification.isSeen) this.decrementUnseenCount();
    return removed;
  };

  _proto.incrementUnreadCount = function incrementUnreadCount() {
    this.unreadCount = this.unreadCount + 1;
  };

  _proto.decrementUnreadCount = function decrementUnreadCount() {
    this.unreadCount = Math.max(0, this.unreadCount - 1);
  };

  _proto.incrementUnseenCount = function incrementUnseenCount() {
    this.unseenCount = this.unseenCount + 1;
  };

  _proto.decrementUnseenCount = function decrementUnseenCount() {
    this.unseenCount = Math.max(0, this.unseenCount - 1);
  };

  _proto.set = function set(json) {
    var notifications = json.notifications,
        metadata = _objectWithoutPropertiesLoose(json, _excluded$1);

    Object.assign(this, metadata);
    if (notifications) this.setItems(notifications);
  }
  /**
   * Append notifications to the store.
   *
   * @param items Object containing the pagination data
   */
  ;

  _proto.setItems = function setItems(items) {
    var _this2 = this,
        _this$items;

    var notifications = items.map(function (notification) {
      return _this2.createNotification(notification);
    });

    (_this$items = this.items).push.apply(_this$items, notifications);

    return this;
  };

  _proto.createNotification = function createNotification(data) {
    return NotificationFactory.create(data);
  };

  _createClass(NotificationStore, [{
    key: "notifications",
    get: function get() {
      return this.items;
    }
    /**
     * Create a notification, store it in the API server and add it to the store.
     *
     * @param data Data of the notification.
     */

  }]);

  return NotificationStore;
}(RemoteStore);

__decorate([camelize()], NotificationStore.prototype, "set", null);

/**
 * Check if a notification satisfies all conditions of the given `context`. It
 * Uses equal to compare.
 *
 * @param notification Notification to test
 * @param context Set of rules to test the notification against
 * @param comparator Function used to compare notification attributes and context values
 */

function compareAttributeStrategy(notification, context, comparator) {
  if (comparator === void 0) {
    comparator = eq;
  }

  var diff = [];
  keys(context).forEach(function (attr) {
    var conditionValue = context[attr];
    if (attr === 'read' && !comparator(notification.isRead, conditionValue) || attr === 'seen' && !comparator(notification.isSeen, conditionValue) || has(notification, attr) && !comparator(notification[attr], conditionValue)) diff.push(attr);
  });
  return {
    result: diff.length === 0,
    delta: diff
  };
}

/**
 * A notification store with a context. Actions are executed taking into
 * consideration the context.
 *
 * @example
 * const store = new NotificationStoreWithContext({ read: true });
 * store.fetch({ page: 2 });
 */

var NotificationStoreWithContext = /*#__PURE__*/function (_NotificationStore) {
  _inheritsLoose(NotificationStoreWithContext, _NotificationStore);

  function NotificationStoreWithContext(context) {
    var _this;

    _this = _NotificationStore.call(this) || this;
    _this.context = {};
    _this.strategy = void 0;
    _this.strategy = compareAttributeStrategy;
    _this.context = context;
    Object.freeze(_this.context);
    return _this;
  }
  /**
   * Add or remove a notification that changed. Changes can be tracked using the
   * `observe` or `observeKey` functions.
   *
   * @param notification Notification to add or remove to the store
   * @param stategy Function to test the notification against the context
   * @returns Whether the notification store was modified or not
   */


  var _proto = NotificationStoreWithContext.prototype;

  _proto.handleNotificationChange = function handleNotificationChange(notification, comparator) {
    var removed = this.removeUnlessMatchesContext(notification, comparator);
    if (removed) return true;else return this.addIfMatchesContext(notification, comparator);
  }
  /**
   * Remove a notification from the store if it does not match the context.
   * Deleted notifications are removed.
   *
   * @param notification Notification to remove
   * @param stategy Function to test the notification against the context
   */
  ;

  _proto.removeUnlessMatchesContext = function removeUnlessMatchesContext(notification, comparator) {
    var matches = this.strategy(notification, this.context, comparator);

    if (notification.deletedAt || !matches.result) {
      var removed = this.remove(notification);

      if (removed) {
        // Though the `remove` method updates the counters, in this scenario some
        // attributes changed before removing the model.
        if (matches.delta.indexOf('read') >= 0) this.decrementUnreadCount();
        if (matches.delta.indexOf('seen') >= 0) this.decrementUnseenCount();
      }

      return removed;
    }

    return false;
  }
  /**
   * Add a notification to the store if it matches the context. Deleted
   * notifications are not added.
   *
   * @param notification Notification to add
   * @param stategy Function to test the notification against the context
   */
  ;

  _proto.addIfMatchesContext = function addIfMatchesContext(notification, comparator) {
    var matches = this.strategy(notification, this.context, comparator);

    if (!notification.deletedAt && matches.result) {
      return this.push(notification);
    }

    return false;
  };

  _proto.fetch = function fetch(queryParams, options) {
    if (queryParams === void 0) {
      queryParams = {};
    }

    if (options === void 0) {
      options = {
        reset: false
      };
    }

    return _NotificationStore.prototype.fetch.call(this, _extends({}, queryParams, this.context), options);
  };

  _proto.fetchNextPage = function fetchNextPage(queryParams) {
    if (queryParams === void 0) {
      queryParams = {};
    }

    return _NotificationStore.prototype.fetchNextPage.call(this, _extends({}, queryParams, this.context));
  };

  _proto.fetchAndReset = function fetchAndReset(queryParams) {
    if (queryParams === void 0) {
      queryParams = {};
    }

    return this.fetch(_extends({
      page: 1
    }, queryParams), {
      reset: true
    });
  };

  return NotificationStoreWithContext;
}(NotificationStore);

var _excluded$2 = ["_baseURL"];

var MagicBellClient = /*#__PURE__*/function () {
  MagicBellClient.createInstance = /*#__PURE__*/function () {
    var _createInstance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(options) {
      var _client$config;

      var client;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              client = new MagicBellClient(options);
              _context.next = 3;
              return (_client$config = client.config) == null ? void 0 : _client$config.fetch();

            case 3:
              return _context.abrupt("return", client);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function createInstance(_x) {
      return _createInstance.apply(this, arguments);
    }

    return createInstance;
  }();

  MagicBellClient.configure = function configure(options) {
    var baseURL = options._baseURL,
        otherOptions = _objectWithoutPropertiesLoose(options, _excluded$2);

    setupAjax(_extends({}, otherOptions, {
      baseURL: baseURL
    }));
  }
  /**
   * Create a MagicBell instance.
   *
   * @param apiKey API key of your MagicBell project
   * @param userEmail Email of the user whose notifications will be displayed
   * @param userExternalId External ID of the user whose notifications will be displayed
   * @param userKey Computed HMAC of the user whose notifications will be displayed, compute this with the secret of the magicbell project
   * @param apiSecret API secret of your MagicBell project (required to create notifications)
   */
  ;

  function MagicBellClient(options) {
    this.config = void 0;
    this._store = void 0;
    // Setup the axios instance
    MagicBellClient.configure(options);
    var isFrontendClient = !isNil(options.userEmail) || !isNil(options.userExternalId);

    if (isFrontendClient) {
      var apiKey = options.apiKey,
          userEmail = options.userEmail,
          userExternalId = options.userExternalId,
          userKey = options.userKey,
          apiSecret = options.apiSecret;
      this.config = new Config({
        apiKey: apiKey,
        userEmail: userEmail,
        userExternalId: userExternalId,
        userKey: userKey,
        apiSecret: apiSecret
      });
    }
  }
  /**
   * @deprecated To create notifications pUse Notification.create() instead
   */


  var _proto = MagicBellClient.prototype;

  /**
   * @deprecated To create notifications pUse Notification.create() instead
   */
  _proto.getStore = function getStore() {
    return this.store;
  }
  /**
   * Connect to a magicbell websocket to get real-time events.
   *
   * @return {Function} Function to close the connection and stop the listeners. YOU MUST CALL THIS FUNCTION in order to prevent memory leaks.
   */
  ;

  _proto.startRealTimeListener = function startRealTimeListener() {
    if (!this.config) throw Error('Set a user email or id for this client');
    var ablyClient = connectToAbly(this.config);

    var emitWakeup = function emitWakeup() {
      return pushEventAggregator.emit('wakeup');
    };

    ablyClient.connection.on('disconnected', emitWakeup);
    ablyClient.connection.on('suspended', emitWakeup);
    var ablyChannel = ablyClient.channels.get(this.config.ws.channel);
    ablyChannel.subscribe(handleAblyEvent);
    return function () {
      ablyClient.connection.off('disconnected');
      ablyClient.connection.off('suspended');
      ablyChannel.unsubscribe(handleAblyEvent);
      ablyChannel.detach();
      ablyClient.close();
    };
  };

  _createClass(MagicBellClient, [{
    key: "store",
    get: function get() {
      if (!this._store) this._store = new NotificationStoreWithContext({});
      return this._store;
    }
  }]);

  return MagicBellClient;
}();

/**
 * Class to interact with the user preferences API endpoints.
 *
 * @example
 * const repo = new NotificationPreferencesRepository();
 * await repo.update({ categories: { comment: commentPreferences } });
 */

var NotificationPreferencesRepository = /*#__PURE__*/function () {
  function NotificationPreferencesRepository(remotePathOrUrl) {
    if (remotePathOrUrl === void 0) {
      remotePathOrUrl = '/notification_preferences';
    }

    this.remotePathOrUrl = void 0;
    this.remotePathOrUrl = remotePathOrUrl;
  }
  /**
   * Get the user preferences from the API server.
   */


  var _proto = NotificationPreferencesRepository.prototype;

  _proto.get = function get() {
    return fetchAPI(this.remotePathOrUrl);
  }
  /**
   * Update user preferences in the API server.
   */
  ;

  _proto.update = function update(data) {
    return putAPI(this.remotePathOrUrl, data);
  };

  return NotificationPreferencesRepository;
}();

/**
 * A representation of notification preferences.
 *
 * @example
 * const preferences = new NotificationPreferences()
 * await preferences.fetch()
 */

var NotificationPreferences = /*#__PURE__*/function () {
  function NotificationPreferences(attrs) {
    this.categories = void 0;
    this.repo = void 0;
    this.set(attrs);
    this.repo = new NotificationPreferencesRepository();
  }

  var _proto = NotificationPreferences.prototype;

  _proto.fetch = /*#__PURE__*/function () {
    var _fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var json;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.repo.get();

            case 2:
              json = _context.sent;
              this.set(json);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function fetch() {
      return _fetch.apply(this, arguments);
    }

    return fetch;
  }();

  _proto.save = /*#__PURE__*/function () {
    var _save = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(data) {
      var payload, json;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              payload = {
                notification_preferences: data
              };
              _context2.next = 3;
              return this.repo.update(payload);

            case 3:
              json = _context2.sent;
              this.set(json);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function save(_x) {
      return _save.apply(this, arguments);
    }

    return save;
  }();

  _proto.set = function set(json) {
    if (json === void 0) {
      json = {};
    }

    Object.assign(this, json);
  };

  return NotificationPreferences;
}();

__decorate([unwrap('notification_preferences'), camelize()], NotificationPreferences.prototype, "set", null);

export default MagicBellClient;
export { Config, Notification, NotificationPreferences, NotificationStore, NotificationStoreWithContext, api, connectToAbly, deleteAPI, fetchAPI, handleAblyEvent, postAPI, pushEventAggregator, putAPI, secondsToDate, setupAjax, toDate, toUnix };
//# sourceMappingURL=core.esm.js.map
