import { NewNotification } from './NewNotification';
/**
 * A notification.
 *
 * @example
 * const notification = new Notification({ id })
 * notification.fetch()
 */
export default class Notification {
    id?: string | null;
    title: string;
    content: string | null;
    category: string | null;
    actionUrl?: string | null;
    customAttributes: Record<string, any>;
    readAt: number | null;
    seenAt: number | null;
    sentAt: number;
    deletedAt: number | null;
    private repo;
    constructor(attrs?: {});
    static create(notificationContent: NewNotification): Promise<any>;
    get seenAtDate(): import("dayjs").Dayjs | null;
    get sentAtDate(): import("dayjs").Dayjs | null;
    get readAtDate(): import("dayjs").Dayjs | null;
    get isRead(): boolean;
    set isRead(isRead: boolean);
    get isSeen(): boolean;
    set isSeen(isSeen: boolean);
    get sanitizedContent(): any;
    /**
     * Fetch the notification from the API server.
     */
    fetch(): Promise<import("./IRemoteNotification").default>;
    /**
     * Delete a notification from the API server.
     */
    delete(): Promise<boolean>;
    /**
     * Mark a notification as read. Sets the `readAt` attribute to the current unix
     * timestamp. It also marks the notification as seen.
     */
    markAsRead(): Promise<boolean>;
    /**
     * Mark a notification as unread. Sets the `readAt` attribute to null.
     */
    markAsUnread(): Promise<boolean>;
    set(json?: {}): void;
    private transformCustomAttributes;
}
